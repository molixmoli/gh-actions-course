name: "Ejemplo con Allure Report"
on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # 1. Cargar historial desde gh-pages
      - name: Load Allure history
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: allure-history
      # 2. Checkout del c√≥digo fuente
      - name: Checkout source code
        uses: actions/checkout@v3

      # 3. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4. Instalar dependencias
      - name: Install dependencies
        run: |
          pip install pytest allure-pytest

      # 5. Ejecutar tests
      - name: Run tests
        run: |
          pytest --alluredir=allure-results -v
        continue-on-error: true

      # 6. Verificar contenido de allure-results
      - name: Verificar allure-results
        run: |
          echo "üìÅ Verificando allure-results:"
          ls -l allure-results || echo "‚ùå No se encontr√≥ allure-results"

      # 7. Generar informe con historial
      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: allure-history
          allure_history: allure-history
          allure_results: allure-results
      # 8. Publicar informe en GitHub Pages
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      # 9. Mostrar URL del informe
      - name: Show Allure Report URL
        if: always()
        run: |
          echo "‚úÖ El informe de Allure est√° disponible en:"
          echo "https://molixmoli.github.io/gh-actions-course/last-history/"